Skip to content
Chat history

You said:
I would like to create simple fastapi service and deploy it to azure kubernetes cluster using helm chart can you please provide details step by step with example how to achieve this
ChatGPT said:
Absolutely! Here's a step-by-step guide to create a simple FastAPI service and deploy it to Azure Kubernetes Service (AKS) using a Helm chart.

✅ Overview
Create a FastAPI application

Build and push Docker image to Azure Container Registry (ACR)

Create Helm chart for deployment

Deploy to AKS using Helm

🔧 1. Create a Simple FastAPI App
📁 app/main.py

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello from FastAPI on AKS"}
📄 requirements.txt

fastapi
uvicorn[standard]
🐳 2. Dockerize the App
📄 Dockerfile

FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app ./app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
Build and test locally:

docker build -t fastapi-app .
docker run -p 80:80 fastapi-app
🏗️ 3. Push to Azure Container Registry (ACR)
a. Create ACR (if not already)
az acr create --resource-group <your-rg> --name <your-acr-name> --sku Basic
az acr login --name <your-acr-name>
b. Tag and push
docker tag fastapi-app <your-acr-name>.azurecr.io/fastapi-app:v1
docker push <your-acr-name>.azurecr.io/fastapi-app:v1
☁️ 4. Create Azure Kubernetes Cluster (AKS)
az aks create --resource-group <your-rg> --name <your-aks-name> --node-count 1 --enable-addons monitoring --generate-ssh-keys
az aks get-credentials --resource-group <your-rg> --name <your-aks-name>
📦 5. Create Helm Chart
Use Helm scaffold:

helm create fastapi-chart
Key Files:
Update these inside fastapi-chart/:

📄 values.yaml

image:
  repository: <your-acr-name>.azurecr.io/fastapi-app
  tag: v1
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 80
📄 templates/deployment.yaml
Ensure your image config is used properly:

containers:
  - name: {{ .Chart.Name }}
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    ports:
      - containerPort: 80
🔐 6. Give AKS access to ACR
az aks update -n <your-aks-name> -g <your-rg> --attach-acr <your-acr-name>
🚀 7. Deploy with Helm
helm install fastapi-app ./fastapi-chart
To update:

helm upgrade fastapi-app ./fastapi-chart
🌐 8. Access the Application
Check the external IP:

kubectl get service fastapi-app
Once the EXTERNAL-IP appears, open it in your browser.

🧼 Cleanup
helm uninstall fastapi-app
az aks delete --name <your-aks-name> --resource-group <your-rg>
az acr delete --name <your-acr-name> --resource-group <your-rg>
Would you like me to generate the full folder structure and files ready-to-use for this project (including the Helm chart)?

You said:
what is {{ .Chart.Name }}
ChatGPT said:
Great question.

{{ .Chart.Name }} is a Helm template variable that gets replaced during chart rendering.

🔍 What is it?
In Helm, template files (like deployment.yaml, service.yaml, etc.) can use Go templating syntax to insert dynamic values from:

The chart metadata (Chart.yaml)

The values.yaml file

Built-in objects like .Chart, .Release, .Values, etc.

🧠 {{ .Chart.Name }} specifically:
Refers to the name of the Helm chart.

Defined in your Chart.yaml like this:

name: fastapi-chart
So {{ .Chart.Name }} will render as fastapi-chart.

📌 Example
Given this in Chart.yaml:

name: fastapi-chart
version: 0.1.0
And this in deployment.yaml:

containers:
  - name: {{ .Chart.Name }}
    image: myregistry.azurecr.io/myimage:v1
It renders as:

containers:
  - name: fastapi-chart
    image: myregistry.azurecr.io/myimage:v1
✅ Use Case
Using {{ .Chart.Name }} helps:

Avoid hardcoding values.

Make your charts reusable and dynamically named.

You can also use .Release.Name for the Helm release name (e.g., fastapi-app if installed as helm install fastapi-app).

Let me know if you'd like a breakdown of the other commonly used Helm template values like .Values, .Release, etc.

You said:
can you create project and put fastapi service and heml chart together for better maintainbility
ChatGPT said:
Absolutely! Here's a clean and production-friendly project structure with a FastAPI service and Helm chart in a single repo, ready for deployment to Azure Kubernetes Service (AKS).

📁 Project Structure
fastapi-aks-app/
├── app/
│   ├── __init__.py
│   └── main.py
├── charts/
│   └── fastapi-chart/
│       ├── Chart.yaml
│       ├── values.yaml
│       └── templates/
│           ├── deployment.yaml
│           ├── service.yaml
│           └── _helpers.tpl
├── Dockerfile
├── requirements.txt
└── README.md
🧠 Project Content
🔹 app/main.py
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello from FastAPI on AKS!"}
🔹 requirements.txt
fastapi
uvicorn[standard]
🔹 Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app ./app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
🔹 charts/fastapi-chart/Chart.yaml
apiVersion: v2
name: fastapi-chart
description: A Helm chart for deploying FastAPI on AKS
version: 0.1.0
appVersion: "1.0"
🔹 charts/fastapi-chart/values.yaml
image:
  repository: <your-acr-name>.azurecr.io/fastapi-app
  tag: v1
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 80

containerPort: 80
🔹 charts/fastapi-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.containerPort }}
🔹 charts/fastapi-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ .Release.Name }}
  ports:
    - protocol: TCP
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.containerPort }}
🔹 README.md (Instructions)
# FastAPI on AKS with Helm

## 📦 Build and Push Image
```bash
az acr login --name <your-acr-name>
docker build -t <your-acr-name>.azurecr.io/fastapi-app:v1 .
docker push <your-acr-name>.azurecr.io/fastapi-app:v1
🚀 Deploy to AKS using Helm
az aks get-credentials --name <aks-name> --resource-group <rg>
helm install fastapi-app ./charts/fastapi-chart
🔄 Upgrade
helm upgrade fastapi-app ./charts/fastapi-chart
🧹 Cleanup
helm uninstall fastapi-app

---

## ✅ Next Steps

Would you like me to export this as a downloadable `.zip` or GitHub-ready project folder with placeholders for ACR and AKS values?

Let me know and I’ll generate and send you the files.
You said:
where is {{ .Release.Name }} and please create dev, uat and prod environments specific yamls
ChatGPT said:
Excellent — let's address both your points:

✅ 1. What is {{ .Release.Name }} in Helm?
{{ .Release.Name }} is a Helm built-in template variable that represents the name of the Helm release you provide during installation:

Example:
helm install fastapi-dev ./charts/fastapi-chart --values charts/fastapi-chart/values-dev.yaml
Here:

{{ .Release.Name }} → becomes fastapi-dev

Used to name resources like the Kubernetes Deployment and Service

✅ 2. Create Environment-Specific Values Files
We'll create values-dev.yaml, values-uat.yaml, and values-prod.yaml for separate environments.

📁 charts/fastapi-chart/values-dev.yaml
image:
  repository: <your-acr-name>.azurecr.io/fastapi-app
  tag: dev
  pullPolicy: Always

service:
  type: LoadBalancer
  port: 80

containerPort: 80
replicaCount: 1
📁 charts/fastapi-chart/values-uat.yaml
image:
  repository: <your-acr-name>.azurecr.io/fastapi-app
  tag: uat
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 80

containerPort: 80
replicaCount: 2
📁 charts/fastapi-chart/values-prod.yaml
image:
  repository: <your-acr-name>.azurecr.io/fastapi-app
  tag: prod
  pullPolicy: IfNotPresent

service:
  type: LoadBalancer
  port: 80

containerPort: 80
replicaCount: 3
🛠️ Update the Chart to Use replicaCount
🔄 Update deployment.yaml:
spec:
  replicas: {{ .Values.replicaCount }}
🚀 Helm Commands for Each Environment
# DEV
helm install fastapi-dev ./charts/fastapi-chart -f charts/fastapi-chart/values-dev.yaml

# UAT
helm install fastapi-uat ./charts/fastapi-chart -f charts/fastapi-chart/values-uat.yaml

# PROD
helm install fastapi-prod ./charts/fastapi-chart -f charts/fastapi-chart/values-prod.yaml
Would you like a downloadable .zip of the full structured project with all these files pre-generated and ready to deploy?

You said:
but helm will understand which aks cluster to use when there are many cluster
ChatGPT said:
Great follow-up! No, Helm itself does not manage or know which AKS cluster to use. Instead, kubectl's context determines which Kubernetes cluster you're currently working with — and Helm uses that context under the hood.

✅ How Helm Knows Which Cluster to Deploy To
Helm talks to the cluster using the current Kubernetes context from your kubectl config. You set the context using:

az aks get-credentials --resource-group <rg> --name <aks-cluster-name>
This adds the cluster to your kubeconfig and sets it as the active context.

🧭 Example: Multiple AKS Clusters
Step 1: Add contexts for multiple clusters
az aks get-credentials --resource-group rg-dev --name aks-dev
az aks get-credentials --resource-group rg-uat --name aks-uat
az aks get-credentials --resource-group rg-prod --name aks-prod
This will add 3 contexts like:

aks-dev

aks-uat

aks-prod

Step 2: Switch Context Based on Environment
# Use DEV
kubectl config use-context aks-dev
helm install fastapi-dev ./charts/fastapi-chart -f charts/fastapi-chart/values-dev.yaml

# Use UAT
kubectl config use-context aks-uat
helm install fastapi-uat ./charts/fastapi-chart -f charts/fastapi-chart/values-uat.yaml

# Use PROD
kubectl config use-context aks-prod
helm install fastapi-prod ./charts/fastapi-chart -f charts/fastapi-chart/values-prod.yaml
You can confirm the current cluster:

kubectl config current-context
🛡️ Optional: Use --kube-context flag
If you don’t want to change global context:

helm install fastapi-uat ./charts/fastapi-chart \
  -f charts/fastapi-chart/values-uat.yaml \
  --kube-context aks-uat
✅ Summary
Tool	Role
kubectl	Manages connection to Kubernetes clusters (context)
helm	Deploys resources to current or --kube-context cluster
Let me know if you'd like a helper script to automate deployments to each environment with cluster switching!

You said:
suppose If I want to deploy it on local Kubernetes cluster running locally using rancher desktop how that can be done
ChatGPT said:
Deploying your FastAPI Helm-based app to a local Kubernetes cluster using Rancher Desktop is very straightforward. Rancher Desktop uses k3s or containerd-based Kubernetes, and provides a local kubectl context automatically.

✅ Step-by-Step: Deploy Helm-Based FastAPI App on Rancher Desktop
🔧 1. Verify Rancher Desktop Kubernetes Setup
Check if Rancher Desktop’s cluster is running and kubectl is configured:

kubectl config get-contexts
You should see a context like:

* rancher-desktop
If not already selected:

kubectl config use-context rancher-desktop
🐳 2. Build Docker Image Locally
Rancher Desktop supports the containerd container runtime, which uses a special local registry. To build images usable by Kubernetes:

Option A: Use nerdctl (preferred)
nerdctl build -t fastapi-app:local .
Ensure the image is visible to Rancher Desktop’s container runtime.

Option B: If using docker (with Docker Desktop installed)
You can enable Docker socket in Rancher Desktop settings and tag your image with:

docker build -t fastapi-app:local .
🛠️ 3. Modify Helm values.yaml for Local Image
Update your values-dev.yaml:

image:
  repository: fastapi-app
  tag: local
  pullPolicy: IfNotPresent

service:
  type: NodePort  # For local clusters
  port: 80

containerPort: 80
replicaCount: 1
Also update the Helm chart’s deployment.yaml to use imagePullPolicy correctly.

🚀 4. Deploy Using Helm
Make sure your image is already built and available locally.

helm install fastapi-local ./charts/fastapi-chart -f charts/fastapi-chart/values-dev.yaml
🌐 5. Access the App in Browser
Find the NodePort exposed:

kubectl get svc fastapi-local
Example output:

NAME            TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
fastapi-local   NodePort   10.43.36.208   <none>        80:32712/TCP   2m
Now go to:

http://localhost:32712/
You should see:

{"message": "Hello from FastAPI on AKS!"}
✅ Optional Cleanup
helm uninstall fastapi-local
🔁 Summary
Step	Command / Action
Switch context	kubectl config use-context rancher-desktop
Build image	nerdctl build -t fastapi-app:local .
Deploy	helm install fastapi-local ./charts/...
Access service	Visit localhost:<NodePort>
Would you like a custom shell script to automate this full workflow (build, deploy, open URL)?

You said:
what if there are multiple aks contexts for command kubectl config get-contexts
ChatGPT said:
Excellent question. When you have multiple AKS or Kubernetes contexts in your kubeconfig, you need to manage and switch between them carefully so you’re always deploying to the intended cluster.

Let me walk you through:

✅ 1. List Available Contexts
kubectl config get-contexts
Example output:

CURRENT   NAME                  CLUSTER                AUTHINFO             NAMESPACE
*         rancher-desktop       rancher-desktop        rancher-desktop
          aks-dev-context       aks-dev-cluster        clusterUser-rg-dev
          aks-uat-context       aks-uat-cluster        clusterUser-rg-uat
          aks-prod-context      aks-prod-cluster       clusterUser-rg-prod
✅ 2. Switch Between Contexts
You can change the current context with:

kubectl config use-context aks-uat-context
Verify:

kubectl config current-context
# Output: aks-uat-context
Now all kubectl and helm commands will point to the AKS UAT cluster.

✅ 3. Use --kube-context (Scoped Helm Deployment)
To avoid switching context globally, pass the context explicitly to helm:

helm install fastapi-uat ./charts/fastapi-chart \
  -f charts/fastapi-chart/values-uat.yaml \
  --kube-context aks-uat-context
This ensures Helm targets only the aks-uat-context cluster — without changing the current context globally.

🧠 Helpful Commands
Task	Command
List all contexts	kubectl config get-contexts
Set current context	kubectl config use-context <name>
View current context	kubectl config current-context
Deploy with specific context	helm install ... --kube-context <name>
View available clusters	az aks list -o table (for Azure AKS)
Remove old context (optional)	kubectl config delete-context <name>
🚀 Optional: Scripting
A sample deployment script for each environment:

#!/bin/bash

ENV=$1  # dev / uat / prod

CONTEXT="aks-${ENV}-context"
VALUES="charts/fastapi-chart/values-${ENV}.yaml"

helm upgrade --install fastapi-${ENV} ./charts/fastapi-chart \
  -f ${VALUES} --kube-context ${CONTEXT}
Run:

./deploy.sh dev
Let me know if you want a script or Makefile for managing multi-context deployments!




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.
