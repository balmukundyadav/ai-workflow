from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents import SearchClient
from azure.search.documents.indexes.models import SearchIndex, SimpleField, SearchableField
from azure.search.documents.models import QueryType
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

AZURE_SEARCH_ENDPOINT = os.getenv("AZURE_SEARCH_ENDPOINT")
AZURE_SEARCH_KEY = os.getenv("AZURE_SEARCH_KEY")
DEFAULT_INDEX_NAME = os.getenv("AZURE_SEARCH_INDEX", "default-index")

credential = AzureKeyCredential(AZURE_SEARCH_KEY)
index_client = SearchIndexClient(endpoint=AZURE_SEARCH_ENDPOINT, credential=credential)

class IndexField(BaseModel):
    name: str
    type: str
    key: Optional[bool] = False
    filterable: Optional[bool] = False
    sortable: Optional[bool] = False
    facetable: Optional[bool] = False
    searchable: Optional[bool] = False
    retrievable: Optional[bool] = True

class CreateIndexRequest(BaseModel):
    name: str
    fields: List[IndexField]

class InsertDataRequest(BaseModel):
    index_name: Optional[str] = DEFAULT_INDEX_NAME
    documents: List[dict]

class SearchRequest(BaseModel):
    query: str
    index_name: Optional[str] = DEFAULT_INDEX_NAME
    top: Optional[int] = 5
    filter: Optional[str] = None
    orderby: Optional[str] = None
    facets: Optional[List[str]] = None
    highlight_fields: Optional[List[str]] = None

@app.post("/build-index")
def build_index(request: CreateIndexRequest):
    fields = []
    for f in request.fields:
        if f.searchable:
            fields.append(SearchableField(
                name=f.name,
                type=f.type,
                filterable=f.filterable,
                sortable=f.sortable,
                facetable=f.facetable,
                retrievable=f.retrievable
            ))
        else:
            fields.append(SimpleField(
                name=f.name,
                type=f.type,
                key=f.key,
                filterable=f.filterable,
                sortable=f.sortable,
                facetable=f.facetable,
                retrievable=f.retrievable
            ))

    index = SearchIndex(name=request.name, fields=fields)
    try:
        result = index_client.create_index(index)
        return {"message": f"Index '{request.name}' created successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/insert-data")
def insert_data(request: InsertDataRequest):
    index_name = request.index_name or DEFAULT_INDEX_NAME
    search_client = SearchClient(endpoint=AZURE_SEARCH_ENDPOINT, index_name=index_name, credential=credential)
    try:
        result = search_client.upload_documents(documents=request.documents)
        return {"message": f"Inserted {len(request.documents)} documents into '{index_name}'", "result": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/search")
def search_documents(request: SearchRequest):
    index_name = request.index_name or DEFAULT_INDEX_NAME
    search_client = SearchClient(endpoint=AZURE_SEARCH_ENDPOINT, index_name=index_name, credential=credential)
    try:
        results = search_client.search(
            search_text=request.query,
            top=request.top,
            filter=request.filter,
            order_by=request.orderby,
            facets=request.facets,
            highlight_fields=request.highlight_fields,
            query_type=QueryType.SIMPLE
        )

        output = []
        for r in results:
            item = r.copy()
            if hasattr(r, "highlights"):
                item["highlights"] = r.highlights
            output.append(item)

        return {"results": output}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/delete-index/{index_name}")
def delete_index(index_name: str):
    try:
        index_client.delete_index(index_name=index_name)
        return {"message": f"Index '{index_name}' successfully deleted"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get-index-schema/{index_name}")
def get_index_schema(index_name: str):
    try:
        index = index_client.get_index(name=index_name)
        schema = [field.as_dict() for field in index.fields]
        return {"index_name": index_name, "fields": schema}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))




‚úÖ 1. POST /build-index
Creates a new Azure Search index with specified schema.

üîó Endpoint
bash
Copy
Edit
POST /build-index
üìÑ Sample Payload
json
Copy
Edit
{
  "name": "products-index",
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true, "filterable": true },
    { "name": "name", "type": "Edm.String", "searchable": true },
    { "name": "description", "type": "Edm.String", "searchable": true },
    { "name": "price", "type": "Edm.Double", "filterable": true, "sortable": true }
  ]
}
‚úÖ 2. POST /insert-data
Inserts documents into an existing index.

üîó Endpoint
bash
Copy
Edit
POST /insert-data
üìÑ Sample Payload
json
Copy
Edit
{
  "index_name": "products-index",
  "documents": [
    {
      "id": "1",
      "name": "Wireless Mouse",
      "description": "Ergonomic wireless mouse",
      "price": 29.99
    },
    {
      "id": "2",
      "name": "Mechanical Keyboard",
      "description": "RGB backlit mechanical keyboard",
      "price": 89.99
    }
  ]
}
If you don‚Äôt pass "index_name", it uses the default from your .env.

‚úÖ 3. POST /search
Searches the index with a text query.

üîó Endpoint
bash
Copy
Edit
POST /search
üìÑ Sample Payload
json
Copy
Edit
{
  "query": "wireless",
  "index_name": "products-index",
  "top": 3
}
Returns up to 3 search matches from the specified index.

‚úÖ 4. DELETE /delete-index/{index_name}
Deletes a specific index from Azure Search.

üîó Endpoint
pgsql
Copy
Edit
DELETE /delete-index/products-index
Just replace products-index with the index name you want to delete.

Let me know if you'd like:

Search filters/sorting examples

Geo or AI-enriched index examples

Upload these samples in Postman collection or Swagger format

A GitHub-ready repo with this whole service setup


1/2





You said:
please enhance the above mentioned points


ChatGPT said:
Great! Let‚Äôs enhance the service and examples to make your FastAPI + Azure Cognitive Search API more robust, realistic, and enterprise-ready.

‚úÖ Enhanced Endpoint Features + Sample Data
üîπ 1. POST /build-index ‚Äì Enhanced Index Creation
‚úÖ Improvements:
Support optional analyzers (e.g., for language-specific search)

Define sortable, filterable, facetable, and retrievable fields

üìÑ Enhanced Payload Example:
json
Copy
Edit
{
  "name": "products-index",
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true, "filterable": true, "sortable": true },
    { "name": "name", "type": "Edm.String", "searchable": true, "sortable": true, "retrievable": true },
    { "name": "description", "type": "Edm.String", "searchable": true, "retrievable": true },
    { "name": "category", "type": "Edm.String", "searchable": true, "filterable": true, "facetable": true },
    { "name": "price", "type": "Edm.Double", "filterable": true, "sortable": true, "retrievable": true },
    { "name": "stock", "type": "Edm.Int32", "filterable": true, "sortable": true }
  ]
}
üîπ 2. POST /insert-data ‚Äì Insert with Diverse Fields
‚úÖ Improvements:
Supports optional @odata.type in documents

Flexible indexing across various field types

Handles bulk insert

üìÑ Enhanced Payload Example:
json
Copy
Edit
{
  "index_name": "products-index",
  "documents": [
    {
      "id": "p001",
      "name": "USB-C Charging Cable",
      "description": "Durable nylon braided cable for fast charging.",
      "category": "Accessories",
      "price": 14.99,
      "stock": 120
    },
    {
      "id": "p002",
      "name": "Gaming Laptop",
      "description": "High-performance laptop for gaming and productivity.",
      "category": "Electronics",
      "price": 1299.99,
      "stock": 10
    }
  ]
}
üîπ 3. POST /search ‚Äì Advanced Search Features
‚úÖ Improvements:
Filter expressions (e.g., price gt 100)

Sorting (orderby)

Facets (e.g., by category)

Highlights (highlighting matched terms)

üìÑ Enhanced Payload Example:
json
Copy
Edit
{
  "query": "laptop",
  "index_name": "products-index",
  "top": 5,
  "filter": "price gt 500 and stock gt 5",
  "orderby": "price desc",
  "facets": ["category"]
}
You‚Äôll need to update your SearchRequest model and search_documents function to support these fields (I'll help if needed).

üîπ 4. DELETE /delete-index/{index_name} ‚Äì Confirmation Response
‚úÖ Improvements:
Confirm deletion with a clear response message

Optional soft-delete flag or audit logging (optional future)

üìÑ Sample Request:
pgsql
Copy
Edit
DELETE /delete-index/products-index
‚úîÔ∏è Sample Response:
json
Copy
Edit
{
  "message": "Index 'products-index' successfully deleted"
}
üõ† Optional Enhancements to Add Next
Feature	Description
üîí Auth	Add API key, JWT, or Azure AD auth
üß† Synonym Maps	Enhance search results with synonyms
üìà Metrics	Add Prometheus/Grafana export or Azure Monitor hooks
üßæ Audit Log	Log all operations to Azure Table or CosmosDB
üì§ Import from CSV/JSON	Upload a file to auto-ingest into index
üìÑ Swagger Tags	Organize endpoints by purpose (build/search/insert/etc.)
üß™ Postman Collection	For easier testing and collaboration
üê≥ Docker	Containerized deployment via Docker or Azure Container Apps
üîÅ Retry Logic	Handle transient Azure API errors with retry policies
üîÑ Async Support	Make all endpoints async-ready with retry/timeout logic

Would you like me to:

Generate an updated OpenAPI spec or Postman collection?

Extend the codebase with filter, sort, facet, and highlight support?

Package this as a ready-to-deploy GitHub repo with CI?

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents import SearchClient
from azure.search.documents.indexes.models import SearchIndex, SimpleField, SearchableField
from azure.search.documents.models import QueryType
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

AZURE_SEARCH_ENDPOINT = os.getenv("AZURE_SEARCH_ENDPOINT")
AZURE_SEARCH_KEY = os.getenv("AZURE_SEARCH_KEY")
DEFAULT_INDEX_NAME = os.getenv("AZURE_SEARCH_INDEX", "default-index")

credential = AzureKeyCredential(AZURE_SEARCH_KEY)
index_client = SearchIndexClient(endpoint=AZURE_SEARCH_ENDPOINT, credential=credential)

class IndexField(BaseModel):
    name: str
    type: str
    key: Optional[bool] = False
    filterable: Optional[bool] = False
    sortable: Optional[bool] = False
    facetable: Optional[bool] = False
    searchable: Optional[bool] = False
    retrievable: Optional[bool] = True

class CreateIndexRequest(BaseModel):
    name: str
    fields: List[IndexField]

class InsertDataRequest(BaseModel):
    index_name: Optional[str] = DEFAULT_INDEX_NAME
    documents: List[dict]

class SearchRequest(BaseModel):
    query: str
    index_name: Optional[str] = DEFAULT_INDEX_NAME
    top: Optional[int] = 5
    filter: Optional[str] = None
    orderby: Optional[str] = None
    facets: Optional[List[str]] = None
    highlight_fields: Optional[List[str]] = None

@app.post("/build-index")
def build_index(request: CreateIndexRequest):
    fields = []
    for f in request.fields:
        if f.searchable:
            fields.append(SearchableField(
                name=f.name,
                type=f.type,
                filterable=f.filterable,
                sortable=f.sortable,
                facetable=f.facetable,
                retrievable=f.retrievable
            ))
        else:
            fields.append(SimpleField(
                name=f.name,
                type=f.type,
                key=f.key,
                filterable=f.filterable,
                sortable=f.sortable,
                facetable=f.facetable,
                retrievable=f.retrievable
            ))

    index = SearchIndex(name=request.name, fields=fields)
    try:
        result = index_client.create_index(index)
        return {"message": f"Index '{request.name}' created successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/insert-data")
def insert_data(request: InsertDataRequest):
    index_name = request.index_name or DEFAULT_INDEX_NAME
    search_client = SearchClient(endpoint=AZURE_SEARCH_ENDPOINT, index_name=index_name, credential=credential)
    try:
        result = search_client.upload_documents(documents=request.documents)
        return {"message": f"Inserted {len(request.documents)} documents into '{index_name}'", "result": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/search")
def search_documents(request: SearchRequest):
    index_name = request.index_name or DEFAULT_INDEX_NAME
    search_client = SearchClient(endpoint=AZURE_SEARCH_ENDPOINT, index_name=index_name, credential=credential)
    try:
        results = search_client.search(
            search_text=request.query,
            top=request.top,
            filter=request.filter,
            order_by=request.orderby,
            facets=request.facets,
            highlight_fields=request.highlight_fields,
            query_type=QueryType.SIMPLE
        )

        output = []
        for r in results:
            item = r.copy()
            if hasattr(r, "highlights"):
                item["highlights"] = r.highlights
            output.append(item)

        return {"results": output}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/delete-index/{index_name}")
def delete_index(index_name: str):
    try:
        index_client.delete_index(index_name=index_name)
        return {"message": f"Index '{index_name}' successfully deleted"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))






























Skip to content
Chat history

You said:
I would like to create fastapi service that will have four endpoints 
first build index to create azure search index
second to insert data to created index
ChatGPT said:
To create a FastAPI service with four endpoints for working with Azure Cognitive Search, we can start by implementing the first two:

POST /build-index ‚Äì Creates an Azure Search index.

POST /insert-data ‚Äì Inserts documents into the created index.

We'll define a FastAPI app that uses Azure SDKs, and you‚Äôll need your Azure Search service name, admin key, and optionally the index name and data schema.

‚úÖ Prerequisites
Install the required libraries:

pip install fastapi uvicorn azure-search-documents python-dotenv
Add your Azure Search credentials to a .env file:

AZURE_SEARCH_ENDPOINT=https://<your-search-service>.search.windows.net
AZURE_SEARCH_API_KEY=<your-admin-key>
AZURE_SEARCH_INDEX_NAME=my-index
üß† Basic Directory Structure
fastapi_azure_search/
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ search_utils.py
‚îú‚îÄ‚îÄ models.py
‚îî‚îÄ‚îÄ .env
üì¶ models.py ‚Äì Pydantic schemas
from pydantic import BaseModel
from typing import List, Dict, Any

class IndexSchema(BaseModel):
    name: str
    fields: List[Dict[str, Any]]  # Field definitions in Azure schema format

class InsertDataRequest(BaseModel):
    documents: List[Dict[str, Any]]
üîß search_utils.py ‚Äì Azure Search helpers
import os
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents import SearchClient
from azure.search.documents.indexes.models import SearchIndex
from dotenv import load_dotenv

load_dotenv()

endpoint = os.getenv("AZURE_SEARCH_ENDPOINT")
api_key = os.getenv("AZURE_SEARCH_API_KEY")

credential = AzureKeyCredential(api_key)

def create_index(index_name: str, fields: list):
    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)
    index = SearchIndex(name=index_name, fields=fields)
    result = index_client.create_index(index)
    return result

def insert_documents(index_name: str, documents: list):
    search_client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
    result = search_client.upload_documents(documents)
    return result
üöÄ main.py ‚Äì FastAPI application
from fastapi import FastAPI, HTTPException
from models import IndexSchema, InsertDataRequest
from search_utils import create_index, insert_documents

app = FastAPI()

@app.post("/build-index")
def build_index(payload: IndexSchema):
    try:
        result = create_index(payload.name, payload.fields)
        return {"message": "Index created", "index": result.name}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/insert-data")
def insert_data(payload: InsertDataRequest):
    try:
        index_name = os.getenv("AZURE_SEARCH_INDEX_NAME")
        result = insert_documents(index_name, payload.documents)
        return {"message": "Documents inserted", "status": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
‚úÖ Running the FastAPI server
uvicorn main:app --reload
üìå Example Requests
Create Index:

POST /build-index

{
  "name": "my-index",
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true, "filterable": true },
    { "name": "title", "type": "Edm.String", "searchable": true },
    { "name": "content", "type": "Edm.String", "searchable": true }
  ]
}
Insert Documents:

POST /insert-data

{
  "documents": [
    { "id": "1", "title": "Test 1", "content": "This is a test document." },
    { "id": "2", "title": "Test 2", "content": "Another document here." }
  ]
}
Would you like to continue with the next two endpoints (e.g., search and delete)?

You said:
also i would like to add third endpoint to search the index by passing the query or search context and fourth endpoint to delete the specified search index from azure search
ChatGPT said:
Perfect! Let's extend your FastAPI service to include:

POST /search ‚Äì Search the Azure index using a query string or search context.

DELETE /delete-index/{index_name} ‚Äì Delete a specified Azure Search index.

üõ†Ô∏è Full Updated Implementation
‚úÖ Updated models.py
from pydantic import BaseModel
from typing import List, Dict, Any, Optional

class IndexSchema(BaseModel):
    name: str
    fields: List[Dict[str, Any]]

class InsertDataRequest(BaseModel):
    documents: List[Dict[str, Any]]

class SearchRequest(BaseModel):
    query: str
    index_name: Optional[str] = None
    top: Optional[int] = 5  # Number of results to return
‚úÖ Updated search_utils.py
import os
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents import SearchClient
from azure.search.documents.indexes.models import SearchIndex
from dotenv import load_dotenv

load_dotenv()

endpoint = os.getenv("AZURE_SEARCH_ENDPOINT")
api_key = os.getenv("AZURE_SEARCH_API_KEY")

credential = AzureKeyCredential(api_key)

def create_index(index_name: str, fields: list):
    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)
    index = SearchIndex(name=index_name, fields=fields)
    return index_client.create_index(index)

def insert_documents(index_name: str, documents: list):
    search_client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
    return search_client.upload_documents(documents)

def search_documents(index_name: str, query: str, top: int = 5):
    search_client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
    results = search_client.search(query, top=top)
    return [doc for doc in results]

def delete_index(index_name: str):
    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)
    index_client.delete_index(index_name)
    return {"message": f"Index '{index_name}' deleted."}
‚úÖ Updated main.py
from fastapi import FastAPI, HTTPException
from models import IndexSchema, InsertDataRequest, SearchRequest
from search_utils import create_index, insert_documents, search_documents, delete_index
import os

app = FastAPI()

@app.post("/build-index")
def build_index(payload: IndexSchema):
    try:
        result = create_index(payload.name, payload.fields)
        return {"message": "Index created", "index": result.name}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/insert-data")
def insert_data(payload: InsertDataRequest):
    try:
        index_name = os.getenv("AZURE_SEARCH_INDEX_NAME")
        result = insert_documents(index_name, payload.documents)
        return {"message": "Documents inserted", "status": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/search")
def search_index(payload: SearchRequest):
    try:
        index_name = payload.index_name or os.getenv("AZURE_SEARCH_INDEX_NAME")
        results = search_documents(index_name=index_name, query=payload.query, top=payload.top)
        return {"results": results}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/delete-index/{index_name}")
def delete_search_index(index_name: str):
    try:
        result = delete_index(index_name)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
üß™ Example Usage
üîç POST /search
{
  "query": "test document",
  "top": 3
}
üóëÔ∏è DELETE /delete-index/my-index
DELETE /delete-index/my-index
Would you like me to help you package this into a GitHub-ready project or a Docker container for deployment?

You said:
please create full flagged service that can be scalable 
ChatGPT said:
Updated saved memory
Here's a scalable, production-ready FastAPI service for managing Azure Cognitive Search. It includes:

‚úÖ Four endpoints:

POST /build-index ‚Äì Create a search index

POST /insert-data ‚Äì Insert documents

POST /search ‚Äì Search the index

DELETE /delete-index/{index_name} ‚Äì Delete index

‚úÖ Production-Ready Features:

Modular code structure

Centralized logging

.env config management

Azure SDK integration

Typed schemas with Pydantic

Uvicorn-compatible for ASGI hosting

Scalable with containers or Azure App Service

üìÅ Project Structure
azure_search_service/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ routes.py
‚îÇ   ‚îú‚îÄ‚îÄ azure_search.py
‚îÇ   ‚îî‚îÄ‚îÄ logger.py
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ run.sh
üîß Configuration ‚Äì .env
AZURE_SEARCH_ENDPOINT=https://<your-service>.search.windows.net
AZURE_SEARCH_API_KEY=<your-admin-key>
DEFAULT_INDEX_NAME=my-index
üì¶ requirements.txt
fastapi
uvicorn
azure-search-documents
python-dotenv
üß† app/config.py
import os
from dotenv import load_dotenv

load_dotenv()

class Settings:
    AZURE_SEARCH_ENDPOINT = os.getenv("AZURE_SEARCH_ENDPOINT")
    AZURE_SEARCH_API_KEY = os.getenv("AZURE_SEARCH_API_KEY")
    DEFAULT_INDEX_NAME = os.getenv("DEFAULT_INDEX_NAME", "default-index")

settings = Settings()
üßæ app/models.py
from pydantic import BaseModel
from typing import List, Dict, Any, Optional

class IndexSchema(BaseModel):
    name: str
    fields: List[Dict[str, Any]]

class InsertDataRequest(BaseModel):
    documents: List[Dict[str, Any]]
    index_name: Optional[str] = None

class SearchRequest(BaseModel):
    query: str
    index_name: Optional[str] = None
    top: Optional[int] = 5
üîß app/logger.py
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)
üîç app/azure_search.py
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents.indexes.models import SearchIndex
from azure.search.documents import SearchClient
from app.config import settings
from app.logger import logger

credential = AzureKeyCredential(settings.AZURE_SEARCH_API_KEY)

def get_index_client():
    return SearchIndexClient(endpoint=settings.AZURE_SEARCH_ENDPOINT, credential=credential)

def get_search_client(index_name):
    return SearchClient(endpoint=settings.AZURE_SEARCH_ENDPOINT, index_name=index_name, credential=credential)

def create_index(index_name: str, fields: list):
    client = get_index_client()
    index = SearchIndex(name=index_name, fields=fields)
    logger.info(f"Creating index: {index_name}")
    return client.create_index(index)

def insert_documents(index_name: str, documents: list):
    client = get_search_client(index_name)
    logger.info(f"Inserting documents to index: {index_name}")
    return client.upload_documents(documents)

def search_documents(index_name: str, query: str, top: int = 5):
    client = get_search_client(index_name)
    logger.info(f"Searching index: {index_name} with query: {query}")
    results = client.search(query, top=top)
    return [doc for doc in results]

def delete_index(index_name: str):
    client = get_index_client()
    logger.info(f"Deleting index: {index_name}")
    client.delete_index(index_name)
    return {"message": f"Index '{index_name}' deleted"}
üåê app/routes.py
from fastapi import APIRouter, HTTPException
from app.models import IndexSchema, InsertDataRequest, SearchRequest
from app.azure_search import create_index, insert_documents, search_documents, delete_index
from app.config import settings

router = APIRouter()

@router.post("/build-index")
def build_index(payload: IndexSchema):
    try:
        result = create_index(payload.name, payload.fields)
        return {"message": "Index created", "index": result.name}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/insert-data")
def insert_data(payload: InsertDataRequest):
    try:
        index_name = payload.index_name or settings.DEFAULT_INDEX_NAME
        result = insert_documents(index_name, payload.documents)
        return {"message": "Documents inserted", "status": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search")
def search_index(payload: SearchRequest):
    try:
        index_name = payload.index_name or settings.DEFAULT_INDEX_NAME
        results = search_documents(index_name, payload.query, payload.top)
        return {"results": results}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/delete-index/{index_name}")
def delete_search_index(index_name: str):
    try:
        return delete_index(index_name)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
üöÄ app/main.py
from fastapi import FastAPI
from app.routes import router

app = FastAPI(title="Azure Search FastAPI Service", version="1.0")

app.include_router(router)
üîÑ run.sh (for local dev)
#!/bin/bash
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
Make it executable:

chmod +x run.sh
üê≥ Optional: Docker Setup
Let me know if you'd like a full Dockerfile, docker-compose.yml, or CI/CD support for this project.

Would you like me to upload this full project as a GitHub-ready repo or zip?




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.


























Absolutely, let's create a complete application using GPT Actions to fetch information from Confluence wiki for user queries. This example will involve setting up FastAPI, integrating with Confluence, using GPT for routing queries, and fetching relevant data.

### Step-by-Step Guide:

1. *Set up FastAPI*: For building the API endpoints.
2. *Integrate Confluence*: Load and search Confluence pages.
3. *Use GPT for Routing*: Decide which Confluence index to query based on user input.
4. *Fetch and Return Data*: Retrieve data from Confluence and present it to the user.

### Complete Code Example

*Filename*: confluence_search_app.py

python
from fastapi import FastAPI, HTTPException
import requests
import openai

app = FastAPI()

# Configuration for Confluence and OpenAI
CONFLUENCE_BASE_URL = "https://your_confluence_instance.atlassian.net/wiki"
CONFLUENCE_API_TOKEN = "your_confluence_api_token"
CONFLUENCE_USER_EMAIL = "your_confluence_user_email"

OPENAI_API_KEY = "your_openai_api_key"
openai.api_key = OPENAI_API_KEY

# Confluence space indexes (example)
CONFLUENCE_INDEXES = {
    "index1": "space1",
    "index2": "space2",
    "index3": "space3",
}

# Function to query Confluence
def query_confluence(space_key, query):
    url = f"{CONFLUENCE_BASE_URL}/rest/api/space/{space_key}/content/search"
    params = {"cql": f"text ~ '{query}'"}
    auth = (CONFLUENCE_USER_EMAIL, CONFLUENCE_API_TOKEN)
    response = requests.get(url, params=params, auth=auth)
    response.raise_for_status()
    return response.json()

# Function to use GPT to decide the index
def decide_index(query):
    prompt = f"Based on the following user query, which Confluence space (index1, index2, index3) should be queried: {query}?"
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        max_tokens=10
    )
    index = response.choices[0].text.strip()
    if index not in CONFLUENCE_INDEXES:
        raise ValueError("Invalid index returned by GPT")
    return index

@app.post("/search")
def search_confluence(query: str):
    try:
        index = decide_index(query)
        space_key = CONFLUENCE_INDEXES[index]
        results = query_confluence(space_key, query)
        return {"index": index, "results": results}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail="An error occurred while processing your request")

# Run the application
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)


### Breakdown:
1. *FastAPI Setup*: Initializes the API with endpoints.
2. *Confluence Integration*: Uses Confluence API to search specific spaces.
3. *GPT Decision Making*: GPT-3 (or similar) decides which Confluence space to query based on the user‚Äôs input.
4. *Query Execution*: Retrieves the relevant data from Confluence and returns it.

This way, user queries are smartly routed and processed, leveraging both GPT‚Äôs capabilities and Confluence‚Äôs powerful search functionality. Ready to¬†implement¬†this?
