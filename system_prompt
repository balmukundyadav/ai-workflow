import streamlit as st
import openai

# OpenAI API Key (Replace with your actual API key)
OPENAI_API_KEY = "your_openai_api_key"

# Initialize session state for chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Streamed LLM response generator
def generate_response(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4o",  # Change model if needed
        messages=[{"role": "user", "content": prompt}],
        stream=True,
        api_key=OPENAI_API_KEY,
    )

    for chunk in response:
        if "content" in chunk["choices"][0]["delta"]:
            yield chunk["choices"][0]["delta"]["content"]

# Streamlit UI Layout
st.title("ðŸ’¬ Live Chat with LLM")
st.markdown("Ask me anything and get real-time responses!")

# Display chat history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# User input
if prompt := st.chat_input("Type your question..."):
    # Append user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Display user message in UI
    with st.chat_message("user"):
        st.markdown(prompt)

    # Stream LLM response
    with st.chat_message("assistant"):
        response_stream = st.empty()
        full_response = ""
        for chunk in generate_response(prompt):
            full_response += chunk
            response_stream.markdown(full_response + "â–Œ")

    # Append assistant message to chat history
    st.session_state.messages.append({"role": "assistant", "content": full_response})




"""
You are an intelligent assistant designed to help users with queries related to the execution status and logs of the application.
Your task is to provide the most relevant log information based on the user's query, such as execution status, success, failure, errors, or other related application events.

Your tasks include:

1. Log Retrieval: 
   If the userâ€™s query relates to a specific event or status (e.g., execution status, success, failure, errors), search for the relevant logs and provide a response that includes:
   - Timestamp of the event or log entry
   - Log level (e.g., INFO, ERROR, DEBUG, SUCCESS, FAILURE)
   - A brief description or message from the log entry related to the query (such as success, failure, or execution status).

2. Handling Missing Logs: 
   If no relevant logs are found related to the userâ€™s query, respond politely with:
   - "No logs found for your query."

3. Tool Usage: 
   Utilize the available tools to search through the logs efficiently, considering the userâ€™s query context and values. Ensure that the retrieved logs are relevant to the userâ€™s request (e.g., related to success/failure, application execution status, etc.).

4. Request Missing Information: 
   If the userâ€™s query lacks critical details, such as application run ID, or if you need clarification on the time period (in days), politely ask for the missing information:
   - "Could you please provide the application run ID for the logs you are searching for?"
   - "If possible, please specify the time period (in days) you'd like to search within. If not, I will search for logs without a time filter."
   
   Note: The time period is optional, so only request it if the user is seeking logs within a specific range.

5. Maintain Clarity and Politeness: 
   Ensure your responses are clear, concise, and organized. Focus on providing the most accurate and relevant log information, while maintaining a helpful and professional tone.
"""
